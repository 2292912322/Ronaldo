import _ from 'lodash'
import HttpClass from '../service/HttpClass'

import Vue from 'vue'
import cookie from 'js-cookie'
import {
  WX_APPID,
  LONG_WAIT_SEC,
  API_CONFIG_BASE
} from '~/config'
import moreHeaders from '~/config/moreHeaders'

import { xyTools } from 'vue-xy-ui'

/*++++++++++ some component insert ++++++++++*/
import wcComponents from './components'
import LoadingComponent from '~/node_modules/vux/src/components/loading/index.vue'

let that = {
  $wc: wcComponents
}

let LoadingConstructor = Vue.extend(LoadingComponent)
let LoadingInstance = new LoadingConstructor({
  el: document.createElement('div')
})
document.body.appendChild(LoadingInstance.$el)
/*---------- some component insert ----------*/

// show	boolean	false	显示状态，在 v2.5.7 前使用v-model绑定，后面直接使用 :show 绑定	--
// text	string	加载中	提示文字，值为空字符时隐藏提示文字	--
// position	string	fixed	定位方式，默认为fixed，在100%的布局下用absolute可以避免抖动	--
let Loading = {
  show: _.throttle((text = '') => {
    LoadingInstance.text = text
    LoadingInstance.show = true
  }, 2000),
  hide () {
    LoadingInstance.show = false
  }
}

let LoadingTimer = new Map()
let LoadingIndex = 0

// 加载慢的效果队列处理
function addLoading (index) {
  LoadingTimer.set(index, setTimeout(function () {
    Loading.show()
  }, LONG_WAIT_SEC))
}

function clearLoadingTimer (index) {
  let target = LoadingTimer.get(index)
  if (target) {
    clearTimeout(target)
    target = null
    LoadingTimer.delete(index)
  }
  Loading.hide()
}

/*++++++++++ axios interceptors ++++++++++*/

class HttpWithUIClass extends HttpClass {
  requestSuccessFunc (requestObj) {
    addLoading(LoadingIndex)
    requestObj.loadingIndex = LoadingIndex++
    // 带上token
    var accessToken = API_CONFIG_BASE.accessToken ? API_CONFIG_BASE.accessToken : cookie.get('accessToken')
    if (accessToken !== null && accessToken !== undefined && accessToken !== '') {
      cookie.set('accessToken', accessToken)
      requestObj.headers.accessToken = accessToken
    }

    moreHeaders(requestObj.headers)

    return requestObj
  }

  requestFailFunc (requestError) {
    clearLoadingTimer(requestError.config.loadingIndex)

    console.error(`requestFailFunc:${requestError}`)

    that.$wc.toast(requestError)
    return Promise.reject(requestError)
  }

  responseSuccessFunc (res) {
    clearLoadingTimer(res.config.loadingIndex)
    let {data, config: {url}} = res

    if (typeof data === 'string') {
      let msg = '未知错误'
      let codeError = data.match(/HTTP Status \d{3}/)
      if (codeError) {
        msg = codeError[0]
      } else if (data === 'ERROR') {
        msg = 'ERROR'
      }
      that.$wc.toast(msg)
      return Promise.reject(msg)
    }

    if (!data.code) {
      data.code = '200'
    }
    if (!data.message) {
      data.message = ''
    }
    if (!data.hasOwnProperty('success')) {
      data.success = true
    }

    // console.log(`%crequest data:${JSON.stringify(data)}`, 'font-size:20px;color:red;')
    if ((data.success || data.state === '200') && data.code.toString() === '200') {
      // console.log(`%crequest success`, 'font-size:20px;color:red;')
      return Promise.resolve(data)
    } else if (data.code.toString() === '401') {
      cookie.remove('accessToken')
      let dels = []
      // 清除缓存
      for (let i = 0; i < sessionStorage.length; i++) {
        let key = sessionStorage.key(i)
        if (key.includes('"url"')) {
          dels.push(key)
        }
      }
      for (let i = 0; i < dels.length; i++) {
        sessionStorage.removeItem(dels[i])
      }
      if (xyTools.browser().wx) {
        window.location.reload()
      } else {
        // 防止多个promise产多多次跳转
        if (!window.location.href.includes(`loginIndex.do.html`)) {
          window.location.href = `${API_CONFIG_BASE.dir.replace('/#', '')}/common/loginIndex.do.html`
        }
      }
    } else if (data.code.toString() === '40101') {
      // 未绑定手机
      that.$wc.toast('请先绑定手机')
      let namespace = window.location.hash.match(/#\/([^/]+)\//)
      if (namespace && !window.location.href.includes(`/common/phone`)) {
        window.location.href = `${API_CONFIG_BASE.dir}/common/phone/${namespace[1]}`
      }
    } else {
      console.log(`%crequest other`, 'font-size:20px;color:red;')
      // 特殊
      if (data.message === '特殊返回信息') {
        console.log('特殊返回信息')
      } else {
        that.$wc.toast(data.message)
      }
    }
    console.error({
      message: data.message ? data.message : data,
      code: data.code ? data.code : null
    })
    return Promise.resolve(data)

    // if (status !== 200) {
    //   console.error({
    //     message: statusText,
    //     code: status,
    //
    //   })
    //   cb = {
    //     success: false,
    //     code: status,
    //     message: statusText,
    //     data: null
    //   }
    // } else {
    //   switch (code) {
    //     case 200: // 如果业务成功，直接进成功回调
    //       cb = {
    //         success: success,
    //         code: code,
    //         message: message,
    //         data: data
    //       }
    //       break
    //     case 1111:
    //       // 如果业务失败，根据不同 code 做不同处理
    //       // 比如最常见的授权过期跳登录
    //       // 特定弹窗
    //       // 跳转特定页面等
    //
    //       // location.href = xxx // 这里的路径也可以放到全局配置里
    //       return
    //     default:
    //       // 业务中还会有一些特殊 code 逻辑，我们可以在这里做统一处理，也可以下方它们到业务层
    //       // if (!res.config.noShowDefaultError) {
    //       // GLOBAL.vbus.$emit('global.$dialog.show', resData.msg)
    //       // }
    //       // return Promise.resolve(data)
    //       return data
    //   }
    // }
  }

  responseFailFunc (responseError) {
    clearLoadingTimer(responseError.config.loadingIndex)

    console.error(`responseFailFunc:${responseError}`)
    let {response} = responseError

    let msg = responseError ? responseError : (response ? (response.data ? response.data : response.statusText) : '未知错误')
    if (response) {
      response.message = msg
      response.code = response.status
    }

    if (responseError.code === 'ECONNABORTED' && responseError.request.readyState === 4) {
      that.$wc.toast('网络异常！')
    } else {
      that.$wc.toast('网络异常！', {title: '错误'})
    }
    return Promise.reject(responseError)
  }

  constructor () {
    super()
  }
}

/*---------- axios interceptors ----------*/

/*---------- some component control ----------*/

function init ({next, base, app}) {

  // let {router} = app

  /*++++++++++ api create ++++++++++*/

  let httpInstance = new HttpWithUIClass()

  app.$api = httpInstance.api

  Vue.prototype.$api = httpInstance.api

  /*---------- api create ----------*/
}

export default init