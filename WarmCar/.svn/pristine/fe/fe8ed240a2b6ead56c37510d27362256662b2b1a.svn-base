import axios from 'axios'
import cookie from 'js-cookie'
import {
  AXIOS_DEFAULT_CONFIG,
  API_CONFIG_BASE
} from '~/config'
import MakeApiClass from './MakeApiClass'
import api from '~/service/api'

export default class HttpClass {
  requestSuccessFunc (requestObj) {
    return requestObj
  }

  requestFailFunc (requestError) {
    console.error(requestError)
    return Promise.reject(requestError)
  }

  responseSuccessFunc (res) {
    let {data} = res
    if (!data.code) {
      data.code = '200'
    }
    if (!data.message) {
      data.message = ''
    }
    if (!data.hasOwnProperty('success')) {
      data.success = true
    }

    if ((data.success || data.state === '200') && data.code === '200') {
      return Promise.resolve(data)
    }
    console.error(new Error(data))
    Promise.reject(data)
  }

  responseFailFunc (responseError) {
    console.error(responseError)
    let {response} = responseError
    let msg = response ? (response.data ? response.data : response.statusText) : responseError.message
    if (response) {
      response.message = msg
      response.code = response.status
    }
    if (responseError.code === 'ECONNABORTED' && responseError.request.readyState === 4) {
      console.error(new Error('网络异常！'))
    } else {
      console.error(new Error(`错误: ${JSON.stringify(responseError)}`))
    }
    return Promise.reject(responseError)
  }

  constructor () {
    let axiosInstance = axios.create(AXIOS_DEFAULT_CONFIG)
    // 注入请求拦截
    axiosInstance
      .interceptors.request.use(this.requestSuccessFunc, this.requestFailFunc)
    // 注入失败拦截
    axiosInstance
      .interceptors.response.use(this.responseSuccessFunc, this.responseFailFunc)

    this.api = new MakeApiClass(api, axiosInstance).api
  }
}